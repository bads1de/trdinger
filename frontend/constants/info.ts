export const ML_INFO_MESSAGES = {
  maxOhlcvRows:
    "特徴量計算に使用するOHLCV（四本値）データの最大行数を指定します。この値が大きいほど、より長期のデータを分析できますが、計算時間とメモリ使用量が増加します。",
  maxFeatureRows:
    "モデル学習に使用する特徴量データの最大行数を指定します。この値が大きいほど、より多くの学習サンプルを使用できますが、学習時間とメモリ使用量が増加します。",
  featureCalculationTimeout:
    "特徴量計算処理の最大許容時間（秒）です。複雑な特徴量を多数計算する場合、この値を大きくする必要があります。タイムアウトすると処理が中断されます。",
  modelTrainingTimeout:
    "モデル学習処理の最大許容時間（秒）です。データ量が多い場合や、複雑なモデルを学習する場合、この値を大きくする必要があります。タイムアウトすると学習が中断されます。",
  learningRate:
    "モデルが学習する際の更新ステップの大きさを制御します。小さいほど慎重に学習しますが、時間がかかります。大きいと学習が速いですが、最適解を通り過ぎる可能性があります。一般的に0.01〜0.1の値が使われます。",
  numLeaves:
    "決定木モデルの複雑さを決定します。値が大きいほど複雑なモデルを作成でき、訓練データへの適合度は高まりますが、過学習のリスクも増大します。ツリーの深さ(depth)と関連し、2^depthより小さい値が推奨されます。",
  featureFraction:
    "各決定木を構築する際に、ランダムに選択される特徴量の割合です。例えば0.8の場合、全特徴量の80%を毎回ランダムに選んで使用します。過学習を抑制する効果があります。",
  baggingFraction:
    "各決定木を学習する際に、ランダムに選択されるデータの割合です。例えば0.8の場合、全データの中から80%をランダムに（重複を許して）抽出し、学習に使用します。これも過学習を抑制する効果があります。",
  trainTestSplit:
    "学習データとテストデータの分割比率です。例えば0.8の場合、データの80%を学習に、残りの20%をテストに使用します。",
  predictionHorizon:
    "モデルが予測を行う期間（時間単位）です。例えば24の場合、現在のデータから24時間後の価格変動を予測します。",
  thresholdUp:
    "価格が上昇すると判断するための閾値です。予測される価格変動がこの値以上であれば、上昇と判断されます。",
  thresholdDown:
    "価格が下落すると判断するための閾値です。予測される価格変動がこの値以下であれば、下落と判断されます。",
  minTrainingSamples:
    "モデル学習に必要な最小サンプル数です。この数に満たない場合、学習は実行されません。",
  defaultUpProb:
    "上昇予測のデフォルト確率です。モデルが予測を生成できない場合に使用されます。",
  defaultDownProb:
    "下落予測のデフォルト確率です。モデルが予測を生成できない場合に使用されます。",
  defaultRangeProb:
    "レンジ予測のデフォルト確率です。モデルが予測を生成できない場合に使用されます。",
  nCalls:
    "ベイズ最適化を実行する総回数を指定します。初期ランダム試行数もこの回数に含まれます。回数が多いほど最適なパラメータを見つけやすくなりますが、時間がかかります。",
  nInitialPoints:
    "最適化の初期段階で、ランダムにパラメータを探索する回数を指定します。これにより、パラメータ空間の全体像を把握し、局所解に陥るのを防ぎます。",
  acquisitionFunctionEI:
    "現在の最良値からの改善が期待できる量に基づいて評価します。探索と活用のバランスが良く、一般的に使われます。",
  acquisitionFunctionPI:
    "現在の最良値を超える確率に基づいて評価します。活用（exploitation）を重視する傾向があります。",
  acquisitionFunctionUCB:
    "予測値の信頼区間の上限に基づいて評価します。探索（exploration）を重視する傾向があります。",
  randomState:
    "最適化プロセスの再現性を確保するための乱数シードです。同じシード値を使えば、同じ初期ランダム試行が行われ、同じ結果が得られます。",
};

export const GA_INFO_MESSAGES = {
  population_size:
    "各世代に存在する個体（戦略）の総数。数が多いほど多様な戦略を探索できますが、計算時間が長くなります。",
  generations:
    "GAが進化を繰り返す世代の総数。世代数が多いほど戦略が洗練される可能性がありますが、計算時間が長くなります。",
  mutation_rate:
    "遺伝子（戦略のパラメータ）がランダムに変化する確率。高いと多様性が増しますが、優れた戦略が破壊されるリスクもあります。",
  crossover_rate:
    "二つの親個体から子個体を生成する（交叉する）確率。高いと既存の優れた戦略の組み合わせを積極的に探索します。",
};
