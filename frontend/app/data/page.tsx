/**
 * „Éá„Éº„Çø„Éö„Éº„Ç∏„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 *
 * OHLCV„Éá„Éº„Çø„Å®FR„Éá„Éº„Çø„ÇíË°®ÂΩ¢Âºè„ÅßË°®Á§∫„Åô„Çã„Éö„Éº„Ç∏„Åß„Åô„ÄÇ
 * „É™„Ç¢„É´„Çø„Ç§„É†„Åß„Éá„Éº„Çø„ÇíÂèñÂæó„ÉªË°®Á§∫„Åó„Åæ„Åô„ÄÇ
 *
 * @author Trdinger Development Team
 * @version 2.0.0
 */

"use client";

import React, { useState, useEffect } from "react";
import OHLCVDataTable from "@/components/OHLCVDataTable";
import FundingRateDataTable from "@/components/FundingRateDataTable";
import OpenInterestDataTable from "@/components/OpenInterestDataTable";
import TechnicalIndicatorDataTable from "@/components/TechnicalIndicatorDataTable";
import OpenInterestCollectionButton from "@/components/common/OpenInterestCollectionButton";
import AllDataCollectionButton from "@/components/common/AllDataCollectionButton";
import TechnicalIndicatorCalculationButton from "@/components/common/TechnicalIndicatorCalculationButton";
import SymbolSelector from "@/components/common/SymbolSelector";
import TimeFrameSelector from "@/components/common/TimeFrameSelector";

import {
  PriceData,
  FundingRateData,
  OpenInterestData,
  TechnicalIndicatorData,
  TimeFrame,
  TradingPair,
  OHLCVResponse,
  FundingRateResponse,
  OpenInterestResponse,
  TechnicalIndicatorResponse,
  BulkOHLCVCollectionResult,
  BulkFundingRateCollectionResult,
  FundingRateCollectionResult,
  OpenInterestCollectionResult,
  BulkOpenInterestCollectionResult,
  BulkTechnicalIndicatorCalculationResult,
  AllDataCollectionResult,
} from "@/types/strategy";
import { BACKEND_API_URL } from "@/constants";

/**
 * „Éá„Éº„Çø„Éö„Éº„Ç∏„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */
const DataPage: React.FC = () => {
  // Áä∂ÊÖãÁÆ°ÁêÜ
  const [symbols, setSymbols] = useState<TradingPair[]>([]);
  const [selectedSymbol, setSelectedSymbol] = useState<string>("BTC/USDT");
  const [selectedTimeFrame, setSelectedTimeFrame] = useState<TimeFrame>("1d");
  const [ohlcvData, setOhlcvData] = useState<PriceData[]>([]);
  const [fundingRateData, setFundingRateData] = useState<FundingRateData[]>([]);
  const [openInterestData, setOpenInterestData] = useState<OpenInterestData[]>(
    []
  );
  const [technicalIndicatorData, setTechnicalIndicatorData] = useState<
    TechnicalIndicatorData[]
  >([]);
  const [activeTab, setActiveTab] = useState<
    "ohlcv" | "funding" | "openinterest" | "technical"
  >("ohlcv");
  const [loading, setLoading] = useState<boolean>(false);
  const [fundingLoading, setFundingLoading] = useState<boolean>(false);
  const [openInterestLoading, setOpenInterestLoading] =
    useState<boolean>(false);
  const [technicalIndicatorLoading, setTechnicalIndicatorLoading] =
    useState<boolean>(false);
  const [error, setError] = useState<string>("");
  const [fundingError, setFundingError] = useState<string>("");
  const [openInterestError, setOpenInterestError] = useState<string>("");
  const [technicalIndicatorError, setTechnicalIndicatorError] =
    useState<string>("");
  const [symbolsLoading, setSymbolsLoading] = useState<boolean>(true);
  const [updating, setUpdating] = useState<boolean>(false);
  const [dataStatus, setDataStatus] = useState<any>(null);
  const [bulkCollectionMessage, setBulkCollectionMessage] =
    useState<string>("");
  const [fundingRateCollectionMessage, setFundingRateCollectionMessage] =
    useState<string>("");
  const [openInterestCollectionMessage, setOpenInterestCollectionMessage] =
    useState<string>("");
  const [allDataCollectionMessage, setAllDataCollectionMessage] =
    useState<string>("");
  const [technicalIndicatorCalculationMessage, setTechnicalIndicatorCalculationMessage] =
    useState<string>("");

  /**
   * ÈÄöË≤®„Éö„Ç¢‰∏ÄË¶ß„ÇíÂèñÂæó
   */
  const fetchSymbols = async () => {
    try {
      setSymbolsLoading(true);
      const response = await fetch("/api/data/symbols");
      const result = await response.json();

      if (result.success) {
        setSymbols(result.data);
      } else {
        setError("ÈÄöË≤®„Éö„Ç¢‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (err) {
      setError("ÈÄöË≤®„Éö„Ç¢‰∏ÄË¶ß„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
      console.error("ÈÄöË≤®„Éö„Ç¢ÂèñÂæó„Ç®„É©„Éº:", err);
    } finally {
      setSymbolsLoading(false);
    }
  };

  /**
   * OHLCV„Éá„Éº„Çø„ÇíÂèñÂæó
   */
  const fetchOHLCVData = async () => {
    try {
      setLoading(true);
      setError("");

      const params = new URLSearchParams({
        symbol: selectedSymbol,
        timeframe: selectedTimeFrame,
        limit: "100",
      });

      const response = await fetch(`/api/data/candlesticks?${params}`);
      const result: OHLCVResponse = await response.json();

      if (result.success) {
        setOhlcvData(result.data.ohlcv);
      } else {
        setError(result.message || "„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (err) {
      setError("„Éá„Éº„Çø„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
      console.error("OHLCV„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", err);
    } finally {
      setLoading(false);
    }
  };

  /**
   * FR„Éá„Éº„Çø„ÇíÂèñÂæó
   */
  const fetchFundingRateData = async () => {
    try {
      setFundingLoading(true);
      setFundingError("");

      const params = new URLSearchParams({
        symbol: selectedSymbol,
        limit: "100",
      });

      const response = await fetch(`/api/data/funding-rates?${params}`);
      const result: FundingRateResponse = await response.json();

      if (result.success) {
        setFundingRateData(result.data.funding_rates);
      } else {
        setFundingError(result.message || "FR„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (err) {
      setFundingError("FR„Éá„Éº„Çø„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
      console.error("FR„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", err);
    } finally {
      setFundingLoading(false);
    }
  };

  /**
   * OI„Éá„Éº„Çø„ÇíÂèñÂæó
   */
  const fetchOpenInterestData = async () => {
    try {
      setOpenInterestLoading(true);
      setOpenInterestError("");

      const params = new URLSearchParams({
        symbol: selectedSymbol,
        limit: "100",
      });

      const response = await fetch(`/api/data/open-interest?${params}`);
      const result: OpenInterestResponse = await response.json();

      if (result.success) {
        setOpenInterestData(result.data.open_interest);
      } else {
        setOpenInterestError(result.message || "OI„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (err) {
      setOpenInterestError("OI„Éá„Éº„Çø„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
      console.error("OI„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", err);
    } finally {
      setOpenInterestLoading(false);
    }
  };

  /**
   * „ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø„ÇíÂèñÂæó
   */
  const fetchTechnicalIndicatorData = async () => {
    try {
      setTechnicalIndicatorLoading(true);
      setTechnicalIndicatorError("");

      const params = new URLSearchParams({
        symbol: selectedSymbol,
        timeframe: selectedTimeFrame,
        limit: "100",
      });

      const response = await fetch(`/api/data/technical-indicators?${params}`);
      const result: TechnicalIndicatorResponse = await response.json();

      if (result.success) {
        setTechnicalIndicatorData(result.data.technical_indicators);
      } else {
        setTechnicalIndicatorError(
          result.message || "„ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        );
      }
    } catch (err) {
      setTechnicalIndicatorError(
        "„ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"
      );
      console.error("„ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", err);
    } finally {
      setTechnicalIndicatorLoading(false);
    }
  };

  /**
   * ÈÄöË≤®„Éö„Ç¢Â§âÊõ¥„Éè„É≥„Éâ„É©
   */
  const handleSymbolChange = (symbol: string) => {
    setSelectedSymbol(symbol);
  };

  /**
   * ÊôÇÈñìËª∏Â§âÊõ¥„Éè„É≥„Éâ„É©
   */
  const handleTimeFrameChange = (timeFrame: TimeFrame) => {
    setSelectedTimeFrame(timeFrame);
  };

  /**
   * „Éá„Éº„ÇøÊõ¥Êñ∞„Éè„É≥„Éâ„É©
   */
  const handleRefresh = () => {
    if (activeTab === "ohlcv") {
      fetchOHLCVData();
    } else if (activeTab === "funding") {
      fetchFundingRateData();
    } else if (activeTab === "openinterest") {
      fetchOpenInterestData();
    } else if (activeTab === "technical") {
      fetchTechnicalIndicatorData();
    }
  };

  /**
   * Â∑ÆÂàÜ„Éá„Éº„ÇøÊõ¥Êñ∞
   */
  const handleIncrementalUpdate = async () => {
    try {
      setUpdating(true);
      setError("");

      const response = await fetch(
        `${BACKEND_API_URL}/api/data-collection/update?symbol=${selectedSymbol}&timeframe=${selectedTimeFrame}`,
        {
          method: "POST",
        }
      );

      const result = await response.json();

      if (result.success) {
        // Êõ¥Êñ∞Âæå„Å´„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó
        await fetchOHLCVData();
      } else {
        setError(result.message || "Â∑ÆÂàÜÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      }
    } catch (err) {
      setError("Â∑ÆÂàÜÊõ¥Êñ∞‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
      console.error("Â∑ÆÂàÜÊõ¥Êñ∞„Ç®„É©„Éº:", err);
    } finally {
      setUpdating(false);
    }
  };

  /**
   * „Éá„Éº„ÇøÂèéÈõÜÁä∂Ê≥Å„ÇíÂèñÂæó
   */
  const fetchDataStatus = async () => {
    try {
      const url = `${BACKEND_API_URL}/api/data-collection/status/${selectedSymbol}/${selectedTimeFrame}`;
      const response = await fetch(url);
      const result = await response.json();

      if (result.success) {
        setDataStatus(result);
      }
    } catch (err) {
      console.error("„Éá„Éº„ÇøÁä∂Ê≥ÅÂèñÂæó„Ç®„É©„Éº:", err);
    }
  };

  /**
   * ‰∏ÄÊã¨OHLCV„Éá„Éº„ÇøÂèéÈõÜÈñãÂßãÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleBulkCollectionStart = (result: BulkOHLCVCollectionResult) => {
    setBulkCollectionMessage(
      `üöÄ ${result.message} (${result.total_tasks}„Çø„Çπ„ÇØ)`
    );
    // „Éá„Éº„ÇøÁä∂Ê≥Å„ÇíÊõ¥Êñ∞
    fetchDataStatus();
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setBulkCollectionMessage(""), 10000);
  };

  /**
   * ‰∏ÄÊã¨OHLCV„Éá„Éº„ÇøÂèéÈõÜ„Ç®„É©„ÉºÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleBulkCollectionError = (errorMessage: string) => {
    setBulkCollectionMessage(`‚ùå ${errorMessage}`);
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setBulkCollectionMessage(""), 10000);
  };

  /**
   * FR„Éá„Éº„ÇøÂèéÈõÜÈñãÂßãÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleFundingRateCollectionStart = (
    result: BulkFundingRateCollectionResult | FundingRateCollectionResult
  ) => {
    if ("total_symbols" in result) {
      // BulkFundingRateCollectionResult
      const bulkResult = result as BulkFundingRateCollectionResult;
      setFundingRateCollectionMessage(
        `üöÄ ${bulkResult.message} (${bulkResult.successful_symbols}/${bulkResult.total_symbols}„Ç∑„É≥„Éú„É´ÊàêÂäü)`
      );
    } else {
      // FundingRateCollectionResult
      const singleResult = result as FundingRateCollectionResult;
      setFundingRateCollectionMessage(
        `üöÄ ${singleResult.symbol}„ÅÆFR„Éá„Éº„ÇøÂèéÈõÜÂÆå‰∫Ü (${singleResult.saved_count}‰ª∂‰øùÂ≠ò)`
      );
    }
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setFundingRateCollectionMessage(""), 10000);
  };

  /**
   * FR„Éá„Éº„ÇøÂèéÈõÜ„Ç®„É©„ÉºÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleFundingRateCollectionError = (errorMessage: string) => {
    setFundingRateCollectionMessage(`‚ùå ${errorMessage}`);
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setFundingRateCollectionMessage(""), 10000);
  };

  /**
   * OI„Éá„Éº„ÇøÂèéÈõÜÈñãÂßãÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleOpenInterestCollectionStart = (
    result: BulkOpenInterestCollectionResult | OpenInterestCollectionResult
  ) => {
    if ("total_symbols" in result) {
      // BulkOpenInterestCollectionResult
      const bulkResult = result as BulkOpenInterestCollectionResult;
      setOpenInterestCollectionMessage(
        `üöÄ ${bulkResult.message} (${bulkResult.successful_symbols}/${bulkResult.total_symbols}„Ç∑„É≥„Éú„É´ÊàêÂäü)`
      );
    } else {
      // OpenInterestCollectionResult
      const singleResult = result as OpenInterestCollectionResult;
      setOpenInterestCollectionMessage(
        `üöÄ ${singleResult.symbol}„ÅÆOI„Éá„Éº„ÇøÂèéÈõÜÂÆå‰∫Ü (${singleResult.saved_count}‰ª∂‰øùÂ≠ò)`
      );
    }
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setOpenInterestCollectionMessage(""), 10000);
  };

  /**
   * OI„Éá„Éº„ÇøÂèéÈõÜ„Ç®„É©„ÉºÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleOpenInterestCollectionError = (errorMessage: string) => {
    setOpenInterestCollectionMessage(`‚ùå ${errorMessage}`);
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setOpenInterestCollectionMessage(""), 10000);
  };

  /**
   * ÂÖ®„Éá„Éº„Çø‰∏ÄÊã¨ÂèéÈõÜÈñãÂßãÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleAllDataCollectionStart = (result: AllDataCollectionResult) => {
    if (result.status === "completed") {
      const ohlcvCount = result.ohlcv_result?.total_tasks || 0;
      const fundingCount = result.funding_rate_result?.total_saved_records || 0;
      const openInterestCount =
        result.open_interest_result?.total_saved_records || 0;

      setAllDataCollectionMessage(
        `üöÄ ÂÖ®„Éá„Éº„ÇøÂèéÈõÜÂÆå‰∫ÜÔºÅ OHLCV:${ohlcvCount}„Çø„Çπ„ÇØ, FR:${fundingCount}‰ª∂, OI:${openInterestCount}‰ª∂, TI:Ëá™ÂãïË®àÁÆóÊ∏à„Åø`
      );
    } else {
      setAllDataCollectionMessage(
        `üîÑ ${result.message} (ÂÆüË°å‰∏≠...)`
      );
    }

    // „Éá„Éº„ÇøÁä∂Ê≥Å„ÇíÊõ¥Êñ∞
    fetchDataStatus();

    // ÂÖ®„Éá„Éº„ÇøÂèéÈõÜÂÆå‰∫ÜÂæå„Å´ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó
    setTimeout(() => {
      fetchOHLCVData();
      fetchFundingRateData();
      fetchOpenInterestData();
      fetchTechnicalIndicatorData();
    }, 3000);

    // 15ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setAllDataCollectionMessage(""), 15000);
  };

  /**
   * ÂÖ®„Éá„Éº„Çø‰∏ÄÊã¨ÂèéÈõÜ„Ç®„É©„ÉºÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleAllDataCollectionError = (errorMessage: string) => {
    setAllDataCollectionMessage(`‚ùå ${errorMessage}`);
    // 15ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setAllDataCollectionMessage(""), 15000);
  };

  /**
   * TI‰∏ÄÊã¨Ë®àÁÆóÈñãÂßãÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleTechnicalIndicatorCalculationStart = (result: BulkTechnicalIndicatorCalculationResult) => {
    setTechnicalIndicatorCalculationMessage(
      `üöÄ ${result.symbol} ${result.timeframe}„ÅÆTI‰∏ÄÊã¨Ë®àÁÆóÂÆå‰∫Ü (${result.total_calculated}‰ª∂Ë®àÁÆóÂÆå‰∫Ü)`
    );
    // „Éá„Éº„ÇøÁä∂Ê≥Å„ÇíÊõ¥Êñ∞
    fetchDataStatus();
    // Ë®àÁÆóÂÆå‰∫ÜÂæå„Å´„ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó
    setTimeout(() => {
      fetchTechnicalIndicatorData();
    }, 2000);
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setTechnicalIndicatorCalculationMessage(""), 10000);
  };

  /**
   * TI‰∏ÄÊã¨Ë®àÁÆó„Ç®„É©„ÉºÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
   */
  const handleTechnicalIndicatorCalculationError = (errorMessage: string) => {
    setTechnicalIndicatorCalculationMessage(`‚ùå ${errorMessage}`);
    // 10ÁßíÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÇØ„É™„Ç¢
    setTimeout(() => setTechnicalIndicatorCalculationMessage(""), 10000);
  };

  // ÂàùÊúü„Éá„Éº„ÇøÂèñÂæó
  useEffect(() => {
    fetchSymbols();
  }, []);

  // ÈÄöË≤®„Éö„Ç¢„Åæ„Åü„ÅØÊôÇÈñìËª∏Â§âÊõ¥ÊôÇ„Å´„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó
  useEffect(() => {
    if (selectedSymbol && selectedTimeFrame) {
      fetchOHLCVData();
      fetchFundingRateData();
      fetchOpenInterestData();
      fetchTechnicalIndicatorData();
      fetchDataStatus();
    }
  }, [selectedSymbol, selectedTimeFrame]);

  return (
    <div className="min-h-screen bg-secondary-50 dark:bg-secondary-950 animate-fade-in">
      {/* „Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫„Éò„ÉÉ„ÉÄ„Éº */}
      <div className="enterprise-card border-0 rounded-none border-b border-secondary-200 dark:border-secondary-700 shadow-enterprise-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="animate-slide-up">
              <h1 className="text-3xl font-bold text-gradient">
                üìä „Éá„Éº„Çø„ÉÜ„Éº„Éñ„É´
              </h1>
              <p className="mt-2 text-base text-secondary-600 dark:text-secondary-400">
                „Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫„É¨„Éô„É´„ÅÆ‰ªÆÊÉ≥ÈÄöË≤®„Éá„Éº„ÇøÂàÜÊûê„ÉªË°®Á§∫
              </p>
              <div className="mt-2 flex items-center gap-2">
                <span className="badge-primary">„É™„Ç¢„É´„Çø„Ç§„É†</span>
                <span className="badge-success">È´òÁ≤æÂ∫¶„Éá„Éº„Çø</span>
              </div>
            </div>

            <div className="flex items-center gap-3 animate-slide-up">
              {/* „Çπ„ÉÜ„Éº„Çø„Çπ„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
              <div className="flex items-center gap-2">
                <div
                  className={`w-2 h-2 rounded-full ${
                    loading
                      ? "bg-warning-500 animate-pulse"
                      : error
                      ? "bg-error-500"
                      : "bg-success-500"
                  }`}
                ></div>
                <span className="text-sm text-secondary-600 dark:text-secondary-400">
                  {loading ? "Êõ¥Êñ∞‰∏≠" : error ? "„Ç®„É©„Éº" : "Êé•Á∂ö‰∏≠"}
                </span>
              </div>

              <div className="flex gap-2">
                <button
                  onClick={handleRefresh}
                  disabled={loading || updating}
                  className="btn-primary group"
                >
                  <svg
                    className={`w-4 h-4 mr-2 transition-transform duration-200 ${
                      loading ? "animate-spin" : "group-hover:rotate-180"
                    }`}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    />
                  </svg>
                  {loading ? "Êõ¥Êñ∞‰∏≠..." : "„Éá„Éº„ÇøÊõ¥Êñ∞"}
                </button>

                <button
                  onClick={handleIncrementalUpdate}
                  disabled={loading || updating}
                  className="btn-secondary group"
                >
                  <svg
                    className={`w-4 h-4 mr-2 transition-transform duration-200 ${
                      updating ? "animate-spin" : "group-hover:scale-110"
                    }`}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 4v16m8-8H4"
                    />
                  </svg>
                  {updating ? "Â∑ÆÂàÜÊõ¥Êñ∞‰∏≠..." : "Â∑ÆÂàÜÊõ¥Êñ∞"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
        {/* „Ç®„É©„ÉºË°®Á§∫ */}
        {error && (
          <div className="enterprise-card border-error-200 dark:border-error-800 bg-error-50 dark:bg-error-900/20 animate-slide-down">
            <div className="p-4">
              <div className="flex items-center">
                <svg
                  className="w-5 h-5 text-error-500 mr-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <h3 className="text-sm font-medium text-error-800 dark:text-error-200">
                  „Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº
                </h3>
              </div>
              <p className="mt-2 text-sm text-error-700 dark:text-error-300">
                {error}
              </p>
            </div>
          </div>
        )}

        {/* „Éá„Éº„ÇøÁä∂Ê≥ÅË°®Á§∫ */}
        {dataStatus && (
          <div className="enterprise-card animate-slide-up">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-secondary-900 dark:text-secondary-100">
                  üìä „Éá„Éº„Çø„Éô„Éº„ÇπÁä∂Ê≥Å
                </h2>
                <span className="badge-primary">
                  {dataStatus.data_count?.toLocaleString()}‰ª∂
                </span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div className="flex justify-between">
                  <span className="text-secondary-600 dark:text-secondary-400">
                    „Éá„Éº„Çø‰ª∂Êï∞:
                  </span>
                  <span className="font-medium text-secondary-900 dark:text-secondary-100">
                    {dataStatus.data_count?.toLocaleString()}‰ª∂
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-secondary-600 dark:text-secondary-400">
                    ÊúÄÊñ∞„Éá„Éº„Çø:
                  </span>
                  <span className="font-medium text-secondary-900 dark:text-secondary-100">
                    {dataStatus.latest_timestamp
                      ? new Date(dataStatus.latest_timestamp).toLocaleString(
                          "ja-JP"
                        )
                      : "„Å™„Åó"}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-secondary-600 dark:text-secondary-400">
                    ÊúÄÂè§„Éá„Éº„Çø:
                  </span>
                  <span className="font-medium text-secondary-900 dark:text-secondary-100">
                    {dataStatus.oldest_timestamp
                      ? new Date(dataStatus.oldest_timestamp).toLocaleString(
                          "ja-JP"
                        )
                      : "„Å™„Åó"}
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* „Ç≥„É≥„Éë„ÇØ„Éà„Éá„Éº„ÇøË®≠ÂÆö */}
        <div className="enterprise-card animate-slide-up">
          <div className="p-6">
            {/* „Çª„ÇØ„Ç∑„Éß„É≥„Éò„ÉÉ„ÉÄ„Éº */}
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-semibold text-secondary-900 dark:text-secondary-100">
                üìà „Éá„Éº„ÇøË®≠ÂÆö
              </h2>
            </div>

            {/* Ë®≠ÂÆö„Ç≥„É≥„Éà„É≠„Éº„É´ */}
            <div className="space-y-6">
              {/* ‰∏äÊÆµÔºöÂü∫Êú¨Ë®≠ÂÆö */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* ÈÄöË≤®„Éö„Ç¢ÈÅ∏Êäû */}
                <SymbolSelector
                  symbols={symbols}
                  selectedSymbol={selectedSymbol}
                  onSymbolChange={handleSymbolChange}
                  loading={symbolsLoading}
                  disabled={loading}
                  mode="compact"
                  showCategories={false}
                  enableSearch={false}
                />

                {/* ÊôÇÈñìËª∏ÈÅ∏Êäû */}
                <TimeFrameSelector
                  selectedTimeFrame={selectedTimeFrame}
                  onTimeFrameChange={handleTimeFrameChange}
                  disabled={loading}
                  mode="compact"
                />
              </div>

              {/* ‰∏ãÊÆµÔºö„Éá„Éº„ÇøÂèéÈõÜ„Éú„Çø„É≥ */}
              <div className="space-y-3">
                <label className="block text-sm font-medium text-secondary-600 dark:text-secondary-400">
                  „Éá„Éº„ÇøÂèéÈõÜ
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
                  {/* ÂÖ®„Éá„Éº„Çø‰∏ÄÊã¨ÂèéÈõÜ„Éú„Çø„É≥ */}
                  <AllDataCollectionButton
                    onCollectionStart={handleAllDataCollectionStart}
                    onCollectionError={handleAllDataCollectionError}
                    disabled={loading || updating}
                    className="h-10 text-sm"
                  />

                  {/* OHLCVÂèéÈõÜ„Éú„Çø„É≥ÔºàCompactDataCollectionButtons„Åã„ÇâÂàÜÈõ¢Ôºâ */}
                  <button
                    onClick={async () => {
                      if (
                        !confirm(
                          "ÂÖ®„Éö„Ç¢„ÉªÂÖ®ÊôÇÈñìËª∏„ÅßOHLCV„Éá„Éº„Çø„ÇíÂèéÈõÜ„Åó„Åæ„Åô„ÅãÔºü"
                        )
                      )
                        return;

                      try {
                        const response = await fetch("/api/data/ohlcv/bulk", {
                          method: "POST",
                          headers: { "Content-Type": "application/json" },
                        });
                        const result = await response.json();

                        if (response.ok && result.success) {
                          handleBulkCollectionStart?.(result);
                        } else {
                          handleBulkCollectionError?.(
                            result.message || "OHLCVÂèéÈõÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
                          );
                        }
                      } catch (error) {
                        handleBulkCollectionError?.(
                          "OHLCVÂèéÈõÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"
                        );
                      }
                    }}
                    disabled={loading || updating}
                    className="h-10 px-4 text-sm font-medium rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:bg-gray-700 disabled:text-gray-400 disabled:cursor-not-allowed transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1"
                  >
                    <span>OHLCVÂèéÈõÜ</span>
                  </button>

                  {/* FRÂèéÈõÜ„Éú„Çø„É≥ÔºàCompactDataCollectionButtons„Åã„ÇâÂàÜÈõ¢Ôºâ */}
                  <button
                    onClick={async () => {
                      if (!confirm("FR„Éá„Éº„Çø„ÇíÂèéÈõÜ„Åó„Åæ„Åô„ÅãÔºü")) return;

                      try {
                        const response = await fetch(
                          "/api/data/funding-rates/bulk",
                          {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                          }
                        );
                        const result = await response.json();

                        if (response.ok && result.success) {
                          handleFundingRateCollectionStart?.(result);
                        } else {
                          handleFundingRateCollectionError?.(
                            result.message || "FRÂèéÈõÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
                          );
                        }
                      } catch (error) {
                        handleFundingRateCollectionError?.(
                          "FRÂèéÈõÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"
                        );
                      }
                    }}
                    disabled={loading || updating}
                    className="h-10 px-4 text-sm font-medium rounded-lg bg-green-600 text-white hover:bg-green-700 disabled:bg-gray-700 disabled:text-gray-400 disabled:cursor-not-allowed transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-1"
                  >
                    <span>FRÂèéÈõÜ</span>
                  </button>

                  {/* OIÂèéÈõÜ„Éú„Çø„É≥ */}
                  <OpenInterestCollectionButton
                    mode="bulk"
                    onCollectionStart={handleOpenInterestCollectionStart}
                    onCollectionError={handleOpenInterestCollectionError}
                    disabled={loading || updating}
                    className="h-10 text-sm"
                  />

                  {/* TI‰∏ÄÊã¨Ë®àÁÆó„Éú„Çø„É≥ */}
                  <TechnicalIndicatorCalculationButton
                    mode="bulk"
                    symbol={selectedSymbol}
                    timeframe={selectedTimeFrame}
                    onCalculationStart={handleTechnicalIndicatorCalculationStart}
                    onCalculationError={handleTechnicalIndicatorCalculationError}
                    disabled={loading || updating}
                    className="h-10 text-sm"
                  />
                </div>
              </div>
            </div>

            {/* „Çπ„ÉÜ„Éº„Çø„Çπ„É°„ÉÉ„Çª„Éº„Ç∏ */}
            {(bulkCollectionMessage ||
              fundingRateCollectionMessage ||
              openInterestCollectionMessage ||
              allDataCollectionMessage ||
              technicalIndicatorCalculationMessage) && (
              <div className="mt-6 pt-4 border-t border-secondary-200 dark:border-secondary-700">
                <div className="space-y-2">
                  {allDataCollectionMessage && (
                    <div className="text-sm text-secondary-600 dark:text-secondary-400 font-medium">
                      {allDataCollectionMessage}
                    </div>
                  )}
                  {bulkCollectionMessage && (
                    <div className="text-sm text-secondary-600 dark:text-secondary-400">
                      {bulkCollectionMessage}
                    </div>
                  )}
                  {fundingRateCollectionMessage && (
                    <div className="text-sm text-secondary-600 dark:text-secondary-400">
                      {fundingRateCollectionMessage}
                    </div>
                  )}
                  {openInterestCollectionMessage && (
                    <div className="text-sm text-secondary-600 dark:text-secondary-400">
                      {openInterestCollectionMessage}
                    </div>
                  )}
                  {technicalIndicatorCalculationMessage && (
                    <div className="text-sm text-secondary-600 dark:text-secondary-400">
                      {technicalIndicatorCalculationMessage}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* „Éá„Éº„ÇøË°®Á§∫„Ç®„É™„Ç¢ */}
        <div className="enterprise-card animate-slide-up">
          <div className="p-6">
            {/* „Çø„Éñ„Éò„ÉÉ„ÉÄ„Éº */}
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-4">
                <h2 className="text-xl font-semibold text-secondary-900 dark:text-secondary-100">
                  üìä {selectedSymbol} - „Éá„Éº„Çø„ÉÜ„Éº„Éñ„É´
                </h2>
                <div className="flex bg-gray-800 rounded-lg p-1">
                  <button
                    onClick={() => setActiveTab("ohlcv")}
                    className={`px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                      activeTab === "ohlcv"
                        ? "bg-primary-600 text-white"
                        : "text-gray-400 hover:text-gray-100"
                    }`}
                  >
                    OHLCV
                  </button>
                  <button
                    onClick={() => setActiveTab("funding")}
                    className={`px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                      activeTab === "funding"
                        ? "bg-primary-600 text-white"
                        : "text-gray-400 hover:text-gray-100"
                    }`}
                  >
                    FR
                  </button>
                  <button
                    onClick={() => setActiveTab("openinterest")}
                    className={`px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                      activeTab === "openinterest"
                        ? "bg-primary-600 text-white"
                        : "text-gray-400 hover:text-gray-100"
                    }`}
                  >
                    OI
                  </button>
                  <button
                    onClick={() => setActiveTab("technical")}
                    className={`px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                      activeTab === "technical"
                        ? "bg-primary-600 text-white"
                        : "text-gray-400 hover:text-gray-100"
                    }`}
                  >
                    TI
                  </button>
                </div>
              </div>

              {/* „Éá„Éº„ÇøÊÉÖÂ†±„Éê„ÉÉ„Ç∏ */}
              <div className="flex items-center gap-2">
                {activeTab === "ohlcv" && ohlcvData.length > 0 && !loading && (
                  <>
                    <span className="badge-primary">{ohlcvData.length}‰ª∂</span>
                    <span className="badge-success">
                      ÊúÄÊñ∞: ${ohlcvData[ohlcvData.length - 1]?.close.toFixed(2)}
                    </span>
                  </>
                )}
                {activeTab === "funding" &&
                  fundingRateData.length > 0 &&
                  !fundingLoading && (
                    <>
                      <span className="badge-primary">
                        {fundingRateData.length}‰ª∂
                      </span>
                      <span className="badge-info">
                        ÊúÄÊñ∞„É¨„Éº„Éà:{" "}
                        {(fundingRateData[0]?.funding_rate * 100).toFixed(4)}%
                      </span>
                    </>
                  )}
                {activeTab === "openinterest" &&
                  openInterestData.length > 0 &&
                  !openInterestLoading && (
                    <>
                      <span className="badge-primary">
                        {openInterestData.length}‰ª∂
                      </span>
                      <span className="badge-warning">
                        ÊúÄÊñ∞OI:{" "}
                        {new Intl.NumberFormat("en-US", {
                          style: "currency",
                          currency: "USD",
                          notation: "compact",
                          maximumFractionDigits: 1,
                        }).format(
                          openInterestData[0]?.open_interest_value || 0
                        )}
                      </span>
                    </>
                  )}
                {activeTab === "technical" &&
                  technicalIndicatorData.length > 0 &&
                  !technicalIndicatorLoading && (
                    <>
                      <span className="badge-primary">
                        {technicalIndicatorData.length}‰ª∂
                      </span>
                      <span className="badge-info">
                        ÊåáÊ®ôÊï∞:{" "}
                        {
                          new Set(
                            technicalIndicatorData.map(
                              (item) => `${item.indicator_type}(${item.period})`
                            )
                          ).size
                        }
                      </span>
                    </>
                  )}
              </div>
            </div>

            {/* „Çø„Éñ„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
            <div className="relative">
              {activeTab === "ohlcv" && (
                <OHLCVDataTable
                  data={ohlcvData}
                  symbol={selectedSymbol}
                  timeframe={selectedTimeFrame}
                  loading={loading}
                  error={error}
                />
              )}
              {activeTab === "funding" && (
                <FundingRateDataTable
                  data={fundingRateData}
                  loading={fundingLoading}
                  error={fundingError}
                />
              )}
              {activeTab === "openinterest" && (
                <OpenInterestDataTable
                  data={openInterestData}
                  loading={openInterestLoading}
                  error={openInterestError}
                />
              )}
              {activeTab === "technical" && (
                <TechnicalIndicatorDataTable
                  data={technicalIndicatorData}
                  loading={technicalIndicatorLoading}
                  error={technicalIndicatorError}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DataPage;
