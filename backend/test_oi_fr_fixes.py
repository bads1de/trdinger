"""
OI/FR‰øÆÊ≠£Áâà„ÉÜ„Çπ„Éà

‰øÆÊ≠£„Åï„Çå„ÅüOI/FRÊ©üËÉΩ„ÅåÂïèÈ°å„ÇíËß£Ê±∫„Åó„Å¶„ÅÑ„Çã„Åã„ÉÜ„Çπ„Éà„Åó„Åæ„Åô„ÄÇ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
from unittest.mock import Mock

from app.core.services.auto_strategy.models.strategy_gene import (
    StrategyGene, IndicatorGene, Condition
)
from app.core.services.auto_strategy.factories.strategy_factory import StrategyFactory

def test_nan_value_handling():
    """NaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà"""
    print("=== NaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà ===")
    
    factory = StrategyFactory()
    
    # NaNÂÄ§„ÇíÂê´„ÇÄ„Éá„Éº„Çø
    mock_data = Mock()
    mock_data.Close = pd.Series([100, 101, 102])
    mock_data.OpenInterest = pd.Series([1000000, np.nan, 2000000])
    mock_data.FundingRate = pd.Series([0.001, np.nan, 0.002])
    
    gene = StrategyGene(
        indicators=[],
        entry_conditions=[Condition("FundingRate", ">", 0.001)],
        exit_conditions=[Condition("close", "<", 95)]
    )
    
    try:
        strategy_class = factory.create_strategy_class(gene)
        strategy = strategy_class(data=mock_data, params={})
        
        # NaNÂÄ§„Åß„ÅÆ„Ç¢„ÇØ„Çª„ÇπÔºàÊúÄÂæå„ÅÆÂÄ§„ÅØÊúâÂäπÔºâ
        fr_value = strategy._get_oi_fr_value("FundingRate")
        oi_value = strategy._get_oi_fr_value("OpenInterest")
        
        print(f"FundingRateÂÄ§: {fr_value} (ÊúüÂæÖ: 0.002)")
        print(f"OpenInterestÂÄ§: {oi_value} (ÊúüÂæÖ: 2000000)")
        
        success = fr_value == 0.002 and oi_value == 2000000
        print(f"‚úÖ NaNÂÄ§Âá¶ÁêÜ: {'ÊàêÂäü' if success else 'Â§±Êïó'}")
        return success
        
    except Exception as e:
        print(f"‚ùå NaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„ÉàÂ§±Êïó: {e}")
        return False

def test_all_nan_values():
    """ÂÖ®NaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà"""
    print("\n=== ÂÖ®NaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà ===")
    
    factory = StrategyFactory()
    
    # ÂÖ®„Å¶NaNÂÄ§„ÅÆ„Éá„Éº„Çø
    mock_data = Mock()
    mock_data.Close = pd.Series([100, 101, 102])
    mock_data.OpenInterest = pd.Series([np.nan, np.nan, np.nan])
    mock_data.FundingRate = pd.Series([np.nan, np.nan, np.nan])
    
    gene = StrategyGene(
        indicators=[],
        entry_conditions=[Condition("FundingRate", ">", 0.001)],
        exit_conditions=[Condition("close", "<", 95)]
    )
    
    try:
        strategy_class = factory.create_strategy_class(gene)
        strategy = strategy_class(data=mock_data, params={})
        
        # ÂÖ®NaNÂÄ§„Åß„ÅÆ„Ç¢„ÇØ„Çª„Çπ
        fr_value = strategy._get_oi_fr_value("FundingRate")
        oi_value = strategy._get_oi_fr_value("OpenInterest")
        
        print(f"FundingRateÂÄ§: {fr_value} (ÊúüÂæÖ: 0.0)")
        print(f"OpenInterestÂÄ§: {oi_value} (ÊúüÂæÖ: 0.0)")
        
        success = fr_value == 0.0 and oi_value == 0.0
        print(f"‚úÖ ÂÖ®NaNÂÄ§Âá¶ÁêÜ: {'ÊàêÂäü' if success else 'Â§±Êïó'}")
        return success
        
    except Exception as e:
        print(f"‚ùå ÂÖ®NaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„ÉàÂ§±Êïó: {e}")
        return False

def test_mixed_nan_values():
    """Ê∑∑ÂêàNaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà"""
    print("\n=== Ê∑∑ÂêàNaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà ===")
    
    factory = StrategyFactory()
    
    # ÊúÄÂæå„ÅåNaN„ÄÅÈÄî‰∏≠„Å´ÊúâÂäπÂÄ§„Åå„ÅÇ„Çã„Éá„Éº„Çø
    mock_data = Mock()
    mock_data.Close = pd.Series([100, 101, 102])
    mock_data.OpenInterest = pd.Series([1000000, 1500000, np.nan])  # ÊúÄÂæå„ÅåNaN
    mock_data.FundingRate = pd.Series([0.001, np.nan, np.nan])      # ÊúÄÂàù„Å†„ÅëÊúâÂäπ
    
    gene = StrategyGene(
        indicators=[],
        entry_conditions=[Condition("FundingRate", ">", 0.0005)],
        exit_conditions=[Condition("close", "<", 95)]
    )
    
    try:
        strategy_class = factory.create_strategy_class(gene)
        strategy = strategy_class(data=mock_data, params={})
        
        # Ê∑∑ÂêàNaNÂÄ§„Åß„ÅÆ„Ç¢„ÇØ„Çª„Çπ
        fr_value = strategy._get_oi_fr_value("FundingRate")
        oi_value = strategy._get_oi_fr_value("OpenInterest")
        
        print(f"FundingRateÂÄ§: {fr_value} (ÊúüÂæÖ: 0.001)")
        print(f"OpenInterestÂÄ§: {oi_value} (ÊúüÂæÖ: 1500000)")
        
        success = fr_value == 0.001 and oi_value == 1500000
        print(f"‚úÖ Ê∑∑ÂêàNaNÂÄ§Âá¶ÁêÜ: {'ÊàêÂäü' if success else 'Â§±Êïó'}")
        return success
        
    except Exception as e:
        print(f"‚ùå Ê∑∑ÂêàNaNÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„ÉàÂ§±Êïó: {e}")
        return False

def test_extreme_values():
    """Ê•µÁ´ØÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà"""
    print("\n=== Ê•µÁ´ØÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„Éà ===")
    
    factory = StrategyFactory()
    
    # Ê•µÁ´Ø„Å™ÂÄ§
    mock_data = Mock()
    mock_data.Close = pd.Series([100, 101, 102])
    mock_data.OpenInterest = pd.Series([1e15, 1e16, 1e17])  # Ê•µÂ§ßÂÄ§
    mock_data.FundingRate = pd.Series([-1.0, -0.5, 0.5])   # Ê•µÁ´Ø„Å™Ë≤†ÂÄ§„Åã„ÇâÊ≠£ÂÄ§
    
    gene = StrategyGene(
        indicators=[],
        entry_conditions=[Condition("FundingRate", ">", 0)],
        exit_conditions=[Condition("OpenInterest", ">", 1e16)]
    )
    
    try:
        strategy_class = factory.create_strategy_class(gene)
        strategy = strategy_class(data=mock_data, params={})
        
        # Êù°‰ª∂Ë©ï‰æ°
        entry_result = strategy._check_entry_conditions()
        exit_result = strategy._check_exit_conditions()
        
        print(f"„Ç®„É≥„Éà„É™„ÉºÊù°‰ª∂ (FR > 0): {entry_result} (ÊúüÂæÖ: True)")
        print(f"„Ç§„Ç∞„Ç∏„ÉÉ„ÉàÊù°‰ª∂ (OI > 1e16): {exit_result} (ÊúüÂæÖ: True)")
        
        success = entry_result and exit_result
        print(f"‚úÖ Ê•µÁ´ØÂÄ§Âá¶ÁêÜ: {'ÊàêÂäü' if success else 'Â§±Êïó'}")
        return success
        
    except Exception as e:
        print(f"‚ùå Ê•µÁ´ØÂÄ§Âá¶ÁêÜ„ÉÜ„Çπ„ÉàÂ§±Êïó: {e}")
        return False

def test_data_type_compatibility():
    """„Éá„Éº„ÇøÂûã‰∫íÊèõÊÄß„ÉÜ„Çπ„Éà"""
    print("\n=== „Éá„Éº„ÇøÂûã‰∫íÊèõÊÄß„ÉÜ„Çπ„Éà ===")
    
    factory = StrategyFactory()
    
    # Áï∞„Å™„Çã„Éá„Éº„ÇøÂûã
    test_cases = [
        ("list", [100, 101, 102]),
        ("numpy", np.array([100, 101, 102])),
        ("pandas", pd.Series([100, 101, 102])),
    ]
    
    results = []
    
    for dtype_name, data_values in test_cases:
        try:
            mock_data = Mock()
            mock_data.Close = pd.Series([100, 101, 102])
            setattr(mock_data, "OpenInterest", data_values)
            setattr(mock_data, "FundingRate", data_values)
            
            gene = StrategyGene(
                indicators=[],
                entry_conditions=[Condition("FundingRate", ">", 50)],
                exit_conditions=[Condition("close", "<", 95)]
            )
            
            strategy_class = factory.create_strategy_class(gene)
            strategy = strategy_class(data=mock_data, params={})
            
            # „Éá„Éº„Çø„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà
            fr_value = strategy._get_oi_fr_value("FundingRate")
            oi_value = strategy._get_oi_fr_value("OpenInterest")
            
            print(f"{dtype_name}Âûã: FR={fr_value}, OI={oi_value}")
            
            success = fr_value == 102 and oi_value == 102
            results.append(success)
            print(f"‚úÖ {dtype_name}Âûã‰∫íÊèõÊÄß: {'ÊàêÂäü' if success else 'Â§±Êïó'}")
            
        except Exception as e:
            print(f"‚ùå {dtype_name}Âûã‰∫íÊèõÊÄß„ÉÜ„Çπ„ÉàÂ§±Êïó: {e}")
            results.append(False)
    
    return all(results)

def test_condition_evaluation_robustness():
    """Êù°‰ª∂Ë©ï‰æ°Â†ÖÁâ¢ÊÄß„ÉÜ„Çπ„Éà"""
    print("\n=== Êù°‰ª∂Ë©ï‰æ°Â†ÖÁâ¢ÊÄß„ÉÜ„Çπ„Éà ===")
    
    factory = StrategyFactory()
    
    # Ë§áÈõë„Å™Êù°‰ª∂„Çª„ÉÉ„Éà
    mock_data = Mock()
    mock_data.Close = pd.Series([100, 101, 102])
    mock_data.OpenInterest = pd.Series([1000000, 1100000, 1200000])
    mock_data.FundingRate = pd.Series([0.001, 0.002, 0.003])
    
    gene = StrategyGene(
        indicators=[IndicatorGene("SMA", {"period": 20})],
        entry_conditions=[
            Condition("close", ">", "SMA_20"),
            Condition("FundingRate", ">", 0.002),
            Condition("OpenInterest", ">", 1100000),
        ],
        exit_conditions=[
            Condition("FundingRate", "<", 0.001),
            Condition("OpenInterest", "<", 1000000),
        ]
    )
    
    try:
        strategy_class = factory.create_strategy_class(gene)
        strategy = strategy_class(data=mock_data, params={})
        
        # ÊåáÊ®ô„ÇíÊâãÂãï„ÅßË®≠ÂÆöÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
        strategy.indicators = {"SMA_20": Mock()}
        strategy.indicators["SMA_20"].__getitem__ = lambda x: 101  # SMAÂÄ§„Çí101„Å´Ë®≠ÂÆö
        strategy.indicators["SMA_20"].__len__ = lambda: 3
        
        # Êù°‰ª∂Ë©ï‰æ°
        entry_result = strategy._check_entry_conditions()
        exit_result = strategy._check_exit_conditions()
        
        print(f"„Ç®„É≥„Éà„É™„ÉºÊù°‰ª∂Ë©ï‰æ°: {entry_result}")
        print(f"„Ç§„Ç∞„Ç∏„ÉÉ„ÉàÊù°‰ª∂Ë©ï‰æ°: {exit_result}")
        
        # „Ç®„É≥„Éà„É™„ÉºÊù°‰ª∂: close(102) > SMA(101) AND FR(0.003) > 0.002 AND OI(1200000) > 1100000 = True
        # „Ç§„Ç∞„Ç∏„ÉÉ„ÉàÊù°‰ª∂: FR(0.003) < 0.001 OR OI(1200000) < 1000000 = False
        
        success = entry_result == True and exit_result == False
        print(f"‚úÖ Êù°‰ª∂Ë©ï‰æ°Â†ÖÁâ¢ÊÄß: {'ÊàêÂäü' if success else 'Â§±Êïó'}")
        return success
        
    except Exception as e:
        print(f"‚ùå Êù°‰ª∂Ë©ï‰æ°Â†ÖÁâ¢ÊÄß„ÉÜ„Çπ„ÉàÂ§±Êïó: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """„É°„Ç§„É≥„ÉÜ„Çπ„ÉàÂÆüË°å"""
    print("üîß OI/FR‰øÆÊ≠£Áâà„ÉÜ„Çπ„ÉàÈñãÂßã\n")
    
    results = []
    
    # ‰øÆÊ≠£Áâà„ÉÜ„Çπ„ÉàÂÆüË°å
    results.append(test_nan_value_handling())
    results.append(test_all_nan_values())
    results.append(test_mixed_nan_values())
    results.append(test_extreme_values())
    results.append(test_data_type_compatibility())
    results.append(test_condition_evaluation_robustness())
    
    # ÁµêÊûú„Çµ„Éû„É™„Éº
    total_tests = len(results)
    successful_tests = sum(results)
    failed_tests = total_tests - successful_tests
    
    print(f"\nüìä ‰øÆÊ≠£Áâà„ÉÜ„Çπ„ÉàÁµêÊûú„Çµ„Éû„É™„Éº:")
    print(f"  Á∑è„ÉÜ„Çπ„ÉàÊï∞: {total_tests}")
    print(f"  ÊàêÂäü: {successful_tests}")
    print(f"  Â§±Êïó: {failed_tests}")
    print(f"  ÊàêÂäüÁéá: {successful_tests/total_tests*100:.1f}%")
    
    if failed_tests == 0:
        print("\nüéâ ÂÖ®„Å¶„ÅÆ‰øÆÊ≠£Áâà„ÉÜ„Çπ„Éà„ÅåÊàêÂäü„Åó„Åæ„Åó„ÅüÔºÅ")
        print("‚úÖ OI/FRÊ©üËÉΩ„ÅÆÂïèÈ°å„Åå‰øÆÊ≠£„Åï„Çå„Åæ„Åó„Åü„ÄÇ")
    else:
        print(f"\n‚ö†Ô∏è {failed_tests}ÂÄã„ÅÆ„ÉÜ„Çπ„Éà„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ")
    
    return failed_tests == 0

if __name__ == "__main__":
    main()
