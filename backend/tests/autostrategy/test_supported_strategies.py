#!/usr/bin/env python3
"""
„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„ÇãÊåáÊ®ô„Çí‰ΩøÁî®„Åó„ÅüÊà¶Áï•„ÉÜ„Çπ„Éà
"""

import sys
import os
import logging
from datetime import datetime, timedelta

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÇíPython„Éë„Çπ„Å´ËøΩÂä†
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

# „É≠„Ç∞„É¨„Éô„É´„ÇíË®≠ÂÆö
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


def test_strategy(strategy_name, strategy_gene, description):
    """ÂÄãÂà•Êà¶Áï•„ÅÆ„ÉÜ„Çπ„Éà"""
    print(f"\n{'='*80}")
    print(f"„ÉÜ„Çπ„ÉàÊà¶Áï•: {strategy_name}")
    print(f"Ë™¨Êòé: {description}")
    print(f"{'='*80}")

    try:
        from app.services.auto_strategy.generators.strategy_factory import (
            StrategyFactory,
        )
        from app.services.backtest.backtest_service import BacktestService
        from app.services.backtest.backtest_data_service import BacktestDataService
        from database.connection import SessionLocal
        from database.repositories.ohlcv_repository import OHLCVRepository
        from database.repositories.open_interest_repository import (
            OpenInterestRepository,
        )
        from database.repositories.funding_rate_repository import FundingRateRepository

        # „Éá„Éº„Çø„Éô„Éº„Çπ„Çª„ÉÉ„Ç∑„Éß„É≥„Å®„É™„Éù„Ç∏„Éà„É™„ÇíÂàùÊúüÂåñ
        with SessionLocal() as db:
            ohlcv_repo = OHLCVRepository(db)
            oi_repo = OpenInterestRepository(db)
            fr_repo = FundingRateRepository(db)

            data_service = BacktestDataService(
                ohlcv_repo=ohlcv_repo, oi_repo=oi_repo, fr_repo=fr_repo
            )
            backtest_service = BacktestService(data_service)

            # StrategyFactory„ÅßÊà¶Áï•„ÇØ„É©„Çπ„ÇíÁîüÊàê
            strategy_factory = StrategyFactory()
            strategy_class = strategy_factory.create_strategy_class(strategy_gene)

            # „Éê„ÉÉ„ÇØ„ÉÜ„Çπ„ÉàË®≠ÂÆö
            config = {
                "strategy_name": strategy_name,
                "symbol": "BTC/USDT:USDT",
                "timeframe": "1h",
                "start_date": datetime.now() - timedelta(days=7),
                "end_date": datetime.now() - timedelta(days=1),
                "initial_capital": 10000000.0,  # 1000‰∏áÂÜÜ
                "commission_rate": 0.001,
                "strategy_class": strategy_class,
                "strategy_config": {
                    "strategy_gene": {
                        "id": strategy_gene.id,
                        "indicators": [
                            {
                                "type": ind.type,
                                "parameters": ind.parameters,
                                "enabled": ind.enabled,
                            }
                            for ind in strategy_gene.indicators
                        ],
                        "entry_conditions": [
                            {
                                "left_operand": cond.left_operand,
                                "operator": cond.operator,
                                "right_operand": cond.right_operand,
                            }
                            for cond in strategy_gene.entry_conditions
                        ],
                        "exit_conditions": [
                            {
                                "left_operand": cond.left_operand,
                                "operator": cond.operator,
                                "right_operand": cond.right_operand,
                            }
                            for cond in strategy_gene.exit_conditions
                        ],
                    }
                },
            }

            print("„Éê„ÉÉ„ÇØ„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠...")
            result = backtest_service.run_backtest(config)

            # ÁµêÊûú„ÅÆË°®Á§∫
            metrics = result.get("performance_metrics", {})
            trade_history = result.get("trade_history", [])

            print(f"‚úÖ {strategy_name} - ÂÆå‰∫Ü")
            print(f"   Á∑èÂèñÂºïÊï∞: {metrics.get('total_trades', 0)}")
            print(f"   ÊúÄÁµÇË≥áÁî£: {metrics.get('final_equity', 0):,.0f}ÂÜÜ")
            print(f"   Âà©ÁõäÁéá: {metrics.get('profit_factor', 0):.4f}")
            print(f"   ÂèñÂºïÂ±•Ê≠¥: {len(trade_history)}‰ª∂")

            return True, metrics, trade_history

    except Exception as e:
        print(f"‚ùå {strategy_name} - „Ç®„É©„Éº: {e}")
        import traceback

        traceback.print_exc()
        return False, {}, []


def create_supported_strategies():
    """„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„ÇãÊåáÊ®ô„Çí‰ΩøÁî®„Åó„ÅüÊà¶Áï•„Éë„Çø„Éº„É≥„Çí‰ΩúÊàê"""
    from app.services.auto_strategy.models.gene_strategy import (
        StrategyGene,
        IndicatorGene,
        Condition,
    )

    strategies = []

    # Êà¶Áï•1: ‰æ°Ê†º„Éô„Éº„ÇπÊà¶Áï•ÔºàClose‰æ°Ê†º„Çí‰ΩøÁî®Ôºâ
    strategies.append(
        {
            "name": "Price_Based",
            "description": "‰æ°Ê†º„Éô„Éº„ÇπÊà¶Áï• - ÁµÇÂÄ§„ÅåÁâπÂÆö„ÅÆÂÄ§„Çí‰∏äÂõû„Å£„Åü„Çâ„Ç®„É≥„Éà„É™„Éº",
            "gene": StrategyGene(
                id="price_based_001",
                indicators=[],  # ÊåáÊ®ô„Å™„Åó„ÄÅ‰æ°Ê†º„Éá„Éº„Çø„ÅÆ„Åø‰ΩøÁî®
                entry_conditions=[
                    Condition(
                        left_operand="Close", operator=">", right_operand=100000.0
                    )
                ],
                exit_conditions=[
                    Condition(left_operand="Close", operator="<", right_operand=95000.0)
                ],
            ),
        }
    )

    # Êà¶Áï•2: STOCHÊà¶Áï•Ôºà„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„ÇãÊåáÊ®ôÔºâ
    strategies.append(
        {
            "name": "STOCH_Strategy",
            "description": "STOCHÊà¶Áï• - „Çπ„Éà„Ç≠„É£„Çπ„ÉÜ„Ç£„ÇØ„Çπ„Çí‰ΩøÁî®",
            "gene": StrategyGene(
                id="stoch_001",
                indicators=[
                    IndicatorGene(
                        type="STOCH",
                        parameters={
                            "fastk_period": 5,
                            "slowk_period": 3,
                            "slowd_period": 3,
                        },
                        enabled=True,
                    )
                ],
                entry_conditions=[
                    Condition(left_operand="STOCH_0", operator="<", right_operand=20.0)
                ],
                exit_conditions=[
                    Condition(left_operand="STOCH_0", operator=">", right_operand=80.0)
                ],
            ),
        }
    )

    # Êà¶Áï•3: AOÊà¶Áï•ÔºàAwesome OscillatorÔºâ
    strategies.append(
        {
            "name": "AO_Strategy",
            "description": "AOÊà¶Áï• - Awesome Oscillator„Çí‰ΩøÁî®",
            "gene": StrategyGene(
                id="ao_001",
                indicators=[IndicatorGene(type="AO", parameters={}, enabled=True)],
                entry_conditions=[
                    Condition(left_operand="AO", operator=">", right_operand=0.0)
                ],
                exit_conditions=[
                    Condition(left_operand="AO", operator="<", right_operand=0.0)
                ],
            ),
        }
    )

    # Êà¶Áï•4: KDJÊà¶Áï•
    strategies.append(
        {
            "name": "KDJ_Strategy",
            "description": "KDJÊà¶Áï• - KDJ„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº„Çí‰ΩøÁî®",
            "gene": StrategyGene(
                id="kdj_001",
                indicators=[IndicatorGene(type="KDJ", parameters={}, enabled=True)],
                entry_conditions=[
                    Condition(left_operand="KDJ", operator="<", right_operand=20.0)
                ],
                exit_conditions=[
                    Condition(left_operand="KDJ", operator=">", right_operand=80.0)
                ],
            ),
        }
    )

    # Êà¶Áï•5: Ë§áÂêà‰æ°Ê†ºÊà¶Áï•ÔºàHigh/Low‰ΩøÁî®Ôºâ
    strategies.append(
        {
            "name": "High_Low_Strategy",
            "description": "È´òÂÄ§„ÉªÂÆâÂÄ§Êà¶Áï• - È´òÂÄ§„Å®ÂÆâÂÄ§„ÅÆÈñ¢‰øÇ„Çí‰ΩøÁî®",
            "gene": StrategyGene(
                id="high_low_001",
                indicators=[],
                entry_conditions=[
                    Condition(
                        left_operand="High", operator=">", right_operand="Low"
                    )  # Â∏∏„Å´TrueÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
                ],
                exit_conditions=[
                    Condition(
                        left_operand="Low", operator="<", right_operand="High"
                    )  # Â∏∏„Å´TrueÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
                ],
            ),
        }
    )

    return strategies


def main():
    """„É°„Ç§„É≥Èñ¢Êï∞"""
    print("üöÄ „Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„ÇãÊåáÊ®ô„Çí‰ΩøÁî®„Åó„ÅüÊà¶Áï•„ÉÜ„Çπ„ÉàÈñãÂßã")
    print("=" * 80)

    strategies = create_supported_strategies()
    results = []

    for strategy in strategies:
        success, metrics, trades = test_strategy(
            strategy["name"], strategy["gene"], strategy["description"]
        )

        results.append(
            {
                "name": strategy["name"],
                "success": success,
                "metrics": metrics,
                "trades": len(trades),
            }
        )

    # Á∑èÂêàÁµêÊûú„ÅÆË°®Á§∫
    print(f"\n{'='*80}")
    print("üìä Á∑èÂêàÁµêÊûú")
    print(f"{'='*80}")

    successful_strategies = [r for r in results if r["success"]]
    failed_strategies = [r for r in results if not r["success"]]

    print(f"‚úÖ ÊàêÂäü„Åó„ÅüÊà¶Áï•: {len(successful_strategies)}/{len(results)}")
    print(f"‚ùå Â§±Êïó„Åó„ÅüÊà¶Áï•: {len(failed_strategies)}/{len(results)}")

    if successful_strategies:
        print("\nÊàêÂäü„Åó„ÅüÊà¶Áï•„ÅÆË©≥Á¥∞:")
        for result in successful_strategies:
            metrics = result["metrics"]
            print(f"  {result['name']}:")
            print(f"    ÂèñÂºïÊï∞: {metrics.get('total_trades', 0)}")
            print(f"    Âà©ÁõäÁéá: {metrics.get('profit_factor', 0):.4f}")
            print(f"    ÊúÄÁµÇË≥áÁî£: {metrics.get('final_equity', 0):,.0f}ÂÜÜ")

    if failed_strategies:
        print("\nÂ§±Êïó„Åó„ÅüÊà¶Áï•:")
        for result in failed_strategies:
            print(f"  ‚ùå {result['name']}")

    print(
        f"\nüéØ „ÉÜ„Çπ„ÉàÂÆå‰∫Ü: {len(successful_strategies)}/{len(results)} Êà¶Áï•„ÅåÊ≠£Â∏∏Âãï‰Ωú"
    )


if __name__ == "__main__":
    main()
