#!/usr/bin/env python3
"""
Áµ±Âêà„Åï„Çå„Åü„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà
„Ç∑„É≥„Éó„É´„Å®Ë§áÈõë„Å™„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÅÆ‰∏°Êñπ„Çí„ÉÜ„Çπ„Éà
"""

import sys
import os
import logging
from datetime import datetime, timedelta

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÇíPython„Éë„Çπ„Å´ËøΩÂä†
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

# „É≠„Ç∞„É¨„Éô„É´„ÇíË®≠ÂÆö
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


def test_simple_short_conditions():
    """„Ç∑„É≥„Éó„É´„ÅßÁô∫Áîü„Åó„ÇÑ„Åô„ÅÑ„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÅÆ„ÉÜ„Çπ„Éà"""
    print("=" * 80)
    print("„Ç∑„É≥„Éó„É´„ÅßÁô∫Áîü„Åó„ÇÑ„Åô„ÅÑ„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÅÆ„ÉÜ„Çπ„Éà")
    print("=" * 80)

    try:
        from app.services.auto_strategy.models.gene_strategy import (
            StrategyGene,
            IndicatorGene,
            Condition,
        )
        from app.services.auto_strategy.models.gene_tpsl import TPSLGene
        from app.services.auto_strategy.models.gene_position_sizing import (
            PositionSizingGene,
        )

        # „ÉÜ„Çπ„ÉàÁî®„ÅÆÊà¶Áï•ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàêÔºà„Ç∑„É≥„Éó„É´„Å™„Ç∑„Éß„Éº„ÉàÊù°‰ª∂Ôºâ
        print("üß¨ „ÉÜ„Çπ„ÉàÁî®Êà¶Áï•ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê...")

        # ÊåáÊ®ô„Çí‰ΩúÊàê
        indicators = [
            IndicatorGene(
                type="SMA",
                parameters={"period": 20},
                enabled=True,
            )
        ]

        # „É≠„É≥„Ç∞Êù°‰ª∂: close > SMA (‰∏äÊòá„Éà„É¨„É≥„Éâ)
        long_entry_conditions = [
            Condition(
                left_operand="close",
                operator=">",
                right_operand="SMA",
            )
        ]

        # „Ç∑„Éß„Éº„ÉàÊù°‰ª∂: close < SMA (‰∏ãÈôç„Éà„É¨„É≥„Éâ)
        short_entry_conditions = [
            Condition(
                left_operand="close",
                operator="<",
                right_operand="SMA",
            )
        ]

        # TP/SLÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê
        tpsl_gene = TPSLGene(
            method="fixed",
            stop_loss_pct=0.02,
            take_profit_pct=0.04,
            enabled=True,
        )

        # „Éù„Ç∏„Ç∑„Éß„É≥„Çµ„Ç§„Ç∏„É≥„Ç∞ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê
        position_sizing_gene = PositionSizingGene(
            method="fixed",
            enabled=True,
        )

        # Êà¶Áï•ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê
        strategy_gene = StrategyGene(
            id="test_simple_short_strategy",
            indicators=indicators,
            entry_conditions=[],  # Á©∫„ÅÆ„Åæ„ÅæÔºà„É≠„É≥„Ç∞„Éª„Ç∑„Éß„Éº„ÉàÂàÜÈõ¢„ÅÆ„Åü„ÇÅÔºâ
            exit_conditions=[],  # Á©∫„ÅÆ„Åæ„ÅæÔºàTP/SL„ÅßÁÆ°ÁêÜÔºâ
            long_entry_conditions=long_entry_conditions,
            short_entry_conditions=short_entry_conditions,
            tpsl_gene=tpsl_gene,
            position_sizing_gene=position_sizing_gene,
            risk_management={},
        )

        print(f"‚úÖ Êà¶Áï•ÈÅ∫‰ºùÂ≠ê‰ΩúÊàêÂÆå‰∫Ü:")
        print(f"   ID: {strategy_gene.id}")
        print(f"   ÊåáÊ®ôÊï∞: {len(strategy_gene.indicators)}")
        print(f"   „É≠„É≥„Ç∞„Ç®„É≥„Éà„É™„ÉºÊù°‰ª∂Êï∞: {len(strategy_gene.long_entry_conditions)}")
        print(
            f"   „Ç∑„Éß„Éº„Éà„Ç®„É≥„Éà„É™„ÉºÊù°‰ª∂Êï∞: {len(strategy_gene.short_entry_conditions)}"
        )
        print(
            f"   TP/SLÈÅ∫‰ºùÂ≠ê: {strategy_gene.tpsl_gene.enabled if strategy_gene.tpsl_gene else False}"
        )

        # Êà¶Áï•„ÇØ„É©„Çπ‰ΩúÊàê„ÉÜ„Çπ„Éà
        print(f"\nüöÄ Êà¶Áï•„ÇØ„É©„Çπ‰ΩúÊàê„ÉÜ„Çπ„Éà...")

        from app.services.auto_strategy.generators.strategy_factory import (
            StrategyFactory,
        )

        strategy_factory = StrategyFactory()
        strategy_class = strategy_factory.create_strategy_class(strategy_gene)
        print(f"‚úÖ Êà¶Áï•„ÇØ„É©„ÇπÁîüÊàêÊàêÂäü: {strategy_class.__name__}")

        # „Ç∑„É≥„Éó„É´„Å™„ÉÜ„Çπ„Éà„Å™„ÅÆ„Åß„ÄÅ„Éê„ÉÉ„ÇØ„ÉÜ„Çπ„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó
        print("\nüìä „Éê„ÉÉ„ÇØ„ÉÜ„Çπ„Éà„ÅØ„Ç™„Éó„Ç∑„Éß„É≥ÔºàÂÆüË°å„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºâ")

    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()


def test_complex_short_conditions():
    """Ë§áÈõë„Å™„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÅÆ„ÉÜ„Çπ„Éà"""
    print("=" * 80)
    print("Ë§áÈõë„Å™„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÅÆ„ÉÜ„Çπ„Éà")
    print("=" * 80)

    try:
        from app.services.auto_strategy.models.gene_strategy import (
            StrategyGene,
            IndicatorGene,
            Condition,
        )
        from app.services.auto_strategy.models.gene_tpsl import TPSLGene
        from app.services.auto_strategy.models.gene_position_sizing import (
            PositionSizingGene,
        )

        # „ÉÜ„Çπ„ÉàÁî®„ÅÆÊà¶Áï•ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàêÔºà„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÇíÂê´„ÇÄÔºâ
        print("üß¨ „ÉÜ„Çπ„ÉàÁî®Êà¶Áï•ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê...")

        # ÊåáÊ®ô„Çí‰ΩúÊàê
        indicators = [
            IndicatorGene(
                type="AROONOSC",
                parameters={"period": 14},
                enabled=True,
            ),
            IndicatorGene(
                type="SMA",
                parameters={"period": 20},
                enabled=True,
            ),
        ]

        # „É≠„É≥„Ç∞Êù°‰ª∂: AROONOSC > 0 AND close > SMA
        long_entry_conditions = [
            Condition(
                left_operand="AROONOSC",
                operator=">",
                right_operand=0.0,
            ),
            Condition(
                left_operand="close",
                operator=">",
                right_operand="SMA",
            ),
        ]

        # „Ç∑„Éß„Éº„ÉàÊù°‰ª∂: AROONOSC < 0 AND close < SMA
        short_entry_conditions = [
            Condition(
                left_operand="AROONOSC",
                operator="<",
                right_operand=0.0,
            ),
            Condition(
                left_operand="close",
                operator="<",
                right_operand="SMA",
            ),
        ]

        # TP/SLÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê
        tpsl_gene = TPSLGene(
            method="fixed",
            stop_loss_pct=0.02,
            take_profit_pct=0.04,
            enabled=True,
        )

        # „Éù„Ç∏„Ç∑„Éß„É≥„Çµ„Ç§„Ç∏„É≥„Ç∞ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê
        position_sizing_gene = PositionSizingGene(
            method="fixed",
            enabled=True,
        )

        # Êà¶Áï•ÈÅ∫‰ºùÂ≠ê„Çí‰ΩúÊàê
        strategy_gene = StrategyGene(
            id="test_complex_short_strategy",
            indicators=indicators,
            entry_conditions=[],  # Á©∫„ÅÆ„Åæ„ÅæÔºà„É≠„É≥„Ç∞„Éª„Ç∑„Éß„Éº„ÉàÂàÜÈõ¢„ÅÆ„Åü„ÇÅÔºâ
            exit_conditions=[],  # Á©∫„ÅÆ„Åæ„ÅæÔºàTP/SL„ÅßÁÆ°ÁêÜÔºâ
            long_entry_conditions=long_entry_conditions,
            short_entry_conditions=short_entry_conditions,
            tpsl_gene=tpsl_gene,
            position_sizing_gene=position_sizing_gene,
            risk_management={},
        )

        print(f"‚úÖ Êà¶Áï•ÈÅ∫‰ºùÂ≠ê‰ΩúÊàêÂÆå‰∫Ü:")
        print(f"   ID: {strategy_gene.id}")
        print(f"   ÊåáÊ®ôÊï∞: {len(strategy_gene.indicators)}")
        print(f"   „É≠„É≥„Ç∞„Ç®„É≥„Éà„É™„ÉºÊù°‰ª∂Êï∞: {len(strategy_gene.long_entry_conditions)}")
        print(
            f"   „Ç∑„Éß„Éº„Éà„Ç®„É≥„Éà„É™„ÉºÊù°‰ª∂Êï∞: {len(strategy_gene.short_entry_conditions)}"
        )
        print(
            f"   TP/SLÈÅ∫‰ºùÂ≠ê: {strategy_gene.tpsl_gene.enabled if strategy_gene.tpsl_gene else False}"
        )

        # Êà¶Áï•„ÇØ„É©„Çπ‰ΩúÊàê„ÉÜ„Çπ„Éà
        print(f"\nüöÄ Êà¶Áï•„ÇØ„É©„Çπ‰ΩúÊàê„ÉÜ„Çπ„Éà...")

        from app.services.auto_strategy.generators.strategy_factory import (
            StrategyFactory,
        )

        strategy_factory = StrategyFactory()
        strategy_class = strategy_factory.create_strategy_class(strategy_gene)
        print(f"‚úÖ Êà¶Áï•„ÇØ„É©„ÇπÁîüÊàêÊàêÂäü: {strategy_class.__name__}")

        print("\nüìä Ë©≥Á¥∞„Å™„Éê„ÉÉ„ÇØ„ÉÜ„Çπ„Éà„ÅØ„Ç™„Éó„Ç∑„Éß„É≥ÔºàÂÆüË°å„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºâ")

    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("„Ç∑„Éß„Éº„ÉàÊù°‰ª∂„ÉÜ„Çπ„ÉàÈñãÂßã")
    test_simple_short_conditions()
    print("\n" + "="*50 + "\n")
    test_complex_short_conditions()